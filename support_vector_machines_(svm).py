# -*- coding: utf-8 -*-
"""Support Vector Machines (SVM)

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OxtInUbDFtCIzAFi322jjE6uEp1CKw1D
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.svm import SVC
from sklearn.metrics import classification_report, confusion_matrix

from google.colab import files
uploaded = files.upload()

import pandas as pd
import io

# Replace with the actual uploaded filename if different
df = pd.read_csv(io.BytesIO(uploaded['breast-cancer.csv']))
df.head()

from sklearn.preprocessing import LabelEncoder

# Drop ID column if present
df = df.drop(columns=['id'], errors='ignore')

# Encode diagnosis column (M = 1, B = 0)
le = LabelEncoder()
df['diagnosis'] = le.fit_transform(df['diagnosis'])

# Check for null values
print(df.isnull().sum())

# Select features and target
X = df.drop('diagnosis', axis=1)
y = df['diagnosis']

# Normalize features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Split into train-test sets
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

# Linear SVM
svm_linear = SVC(kernel='linear')
svm_linear.fit(X_train, y_train)

# RBF SVM
svm_rbf = SVC(kernel='rbf')
svm_rbf.fit(X_train, y_train)

print("Linear SVM Classification Report:")
print(classification_report(y_test, svm_linear.predict(X_test)))

print("RBF SVM Classification Report:")
print(classification_report(y_test, svm_rbf.predict(X_test)))

param_grid = {
    'C': [0.1, 1, 10, 100],
    'gamma': [1, 0.1, 0.01, 0.001],
    'kernel': ['rbf']
}

grid = GridSearchCV(SVC(), param_grid, refit=True, verbose=1, cv=5)
grid.fit(X_train, y_train)

print("Best Parameters:", grid.best_params_)
print("Best Score:", grid.best_score_)

# 5-fold cross-validation on best model
best_model = grid.best_estimator_
cv_scores = cross_val_score(best_model, X_scaled, y, cv=5)
print("Cross-validation accuracy scores:", cv_scores)
print("Mean accuracy:", np.mean(cv_scores))

from sklearn.decomposition import PCA

pca = PCA(n_components=2)
X_pca = pca.fit_transform(X_scaled)

# Train and plot SVM decision boundary
model = SVC(kernel='rbf', C=1, gamma=0.01)
model.fit(X_pca, y)

# Plotting
h = .02
x_min, x_max = X_pca[:, 0].min() - 1, X_pca[:, 0].max() + 1
y_min, y_max = X_pca[:, 1].min() - 1, X_pca[:, 1].max() + 1
xx, yy = np.meshgrid(np.arange(x_min, x_max, h),
                     np.arange(y_min, y_max, h))

Z = model.predict(np.c_[xx.ravel(), yy.ravel()])
Z = Z.reshape(xx.shape)

plt.contourf(xx, yy, Z, cmap=plt.cm.coolwarm, alpha=0.8)
plt.scatter(X_pca[:, 0], X_pca[:, 1], c=y, cmap=plt.cm.coolwarm, edgecolors='k')
plt.xlabel("PCA 1")
plt.ylabel("PCA 2")
plt.title("SVM Decision Boundary (RBF Kernel)")
plt.show()